service: ${env:SERVICE_NAME}
frameworkVersion: '3'

plugins:
  - serverless-domain-manager
  - serverless-offline

provider:
  endpointType: EDGE
  environment:
    user_pool_id: { Ref: UserPool }
    client_id: { Ref: UserClient }
  iamRoleStatements:
    - Effect: Allow
      Action:
        - cognito-idp:AdminInitiateAuth
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminSetUserPassword
      Resource: '*'
  memorySize: 128
  name: aws
  region: us-east-1
  runtime: nodejs18.x
  stage: ${env:STAGE}
  timeout: 5

params:
  default:
    apiBasePath: ${env:API_VERSION}-${env:STAGE}
    authSubdomain: ${env:AUTH_SUBDOMAIN}-${env:STAGE}
    webSubdomain: ${env:WEB_SUBDOMAIN}-${env:STAGE}
  prod:
    apiBasePath: ${env:API_VERSION}
    authSubdomain: ${env:AUTH_SUBDOMAIN}
    webSubdomain: ${env:WEB_SUBDOMAIN}

custom:
  customDomain:
    domainName: ${env:API_SUBDOMAIN}.${env:ROOT_DOMAIN}
    basePath: ${param:apiBasePath}
    certificateArn: ${env:CERTIFICATE_ARN}

functions:
  hello:
    handler: api/open/hello.get
    description: GET /hello
    events:
      - http:
          path: hello
          method: get
          cors: true

  secure-hello:
    handler: api/secure/hello.get
    events:
      - http:
          path: secure-hello
          method: get
          cors: true
          authorizer:
            name: UserPoolAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt UserPool.Arn
            claims:
              - email

resources:
  Resources:
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        AutoVerifiedAttributes: ['email']
        Schema:
          - Name: email
            Mutable: true
            Required: true
        UsernameConfiguration:
          CaseSensitive: false
        UserPoolName: ${env:SERVICE_NAME}-userpool-${env:STAGE}

    UserPoolIdentityProviderGoogle:
      Type: AWS::Cognito::UserPoolIdentityProvider
      Properties:
        UserPoolId: !Ref UserPool
        ProviderName: Google
        ProviderDetails:
          client_id: '${env:GOOGLE_CLIENT_ID}'
          client_secret: '${env:GOOGLE_CLIENT_SECRET}'
          authorize_scopes: 'profile email openid'
        ProviderType: Google
        AttributeMapping:
          email: email

    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        AllowedOAuthFlows:
          - code
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthScopes:
          - email
          - openid
          - profile
        CallbackURLs:
          - 'https://${param:webSubdomain}.${env:ROOT_DOMAIN}/api/auth/callback/cognito'
          - 'http://localhost:${env:LOCALHOST_PORT}/api/auth/callback/cognito'
        ClientName: web-app
        GenerateSecret: true
        LogoutURLs:
          - 'https://${param:webSubdomain}.${env:ROOT_DOMAIN}'
          - 'http://localhost:${env:LOCALHOST_PORT}'
        SupportedIdentityProviders:
          - COGNITO
          # - Google
        UserPoolId: !Ref UserPool

    UserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        CustomDomainConfig:
          CertificateArn: ${env:CERTIFICATE_ARN}
        Domain: ${param:authSubdomain}.${env:ROOT_DOMAIN}
        UserPoolId: !Ref UserPool

    UserPoolAlias:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneName: '${env:ROOT_DOMAIN}.'
        RecordSets:
          - Name: ${param:authSubdomain}.${env:ROOT_DOMAIN}.
            ResourceRecords:
              - !GetAtt UserPoolDomain.CloudFrontDistribution
            TTL: '300'
            Type: CNAME

    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
