service: aws-api-template
frameworkVersion: '3'

plugins:
  - serverless-domain-manager
  - serverless-offline

provider:
  endpointType: EDGE
  environment:
    user_pool_id: { Ref: UserPool }
    client_id: { Ref: UserClient }
  iamRoleStatements:
    - Effect: Allow
      Action:
        - cognito-idp:AdminInitiateAuth
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminSetUserPassword
      Resource: '*'
  memorySize: 128
  name: aws
  region: us-east-1
  runtime: nodejs18.x
  stage: dev
  timeout: 5

custom:
  localhost: http://localhost:3000
  apiSubdomain: aws-api-template
  authSubdomain: aws-api-template-auth
  webSubdomain: nextjs-template

  certificateArn: arn:aws:acm:us-east-1:706896224302:certificate/4d8ec53b-1770-4042-8484-e8557f6937ee
  customDomain:
    domainName: ${self:custom.apiSubdomain}.${env:ROOT_DOMAIN}
    basePath: ${self:custom.stage2ApiBasePath.${opt:stage, self:provider.stage}}
    certificateArn: ${self:custom.certificateArn}
  stage2ApiBasePath:
    dev: 'v0-dev'
    prod: 'v0'
    test: 'v0-test'
  stage2AuthSubdomain:
    dev: ${self:custom.authSubdomain}-dev
    prod: ${self:custom.authSubdomain}
    test: ${self:custom.authSubdomain}-test
  stage2WebSubdomain:
    dev: ${self:custom.webSubdomain}-dev
    prod: ${self:custom.webSubdomain}
    test: ${self:custom.webSubdomain}-test

functions:
  hello:
    handler: api/open/hello.get
    description: GET /hello
    events:
      - http:
          path: hello
          method: get
          cors: true

  secure-hello:
    handler: api/secure/hello.get
    events:
      - http:
          path: secure-hello
          method: get
          cors: true
          authorizer:
            name: UserPoolAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt UserPool.Arn
            claims:
              - email

resources:
  Resources:
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        AutoVerifiedAttributes: ['email']
        Schema:
          - Name: email
            Mutable: true
            Required: true
        UsernameConfiguration:
          CaseSensitive: false
        UserPoolName: ${self:service}-userpool-${opt:stage, self:provider.stage}

    UserPoolIdentityProviderGoogle:
      Type: AWS::Cognito::UserPoolIdentityProvider
      Properties:
        UserPoolId: !Ref UserPool
        ProviderName: Google
        ProviderDetails:
          client_id: '659306920886-048mbsh16caed33svsfear0cikqj04hv.apps.googleusercontent.com'
          client_secret: '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'
          authorize_scopes: 'profile email openid'
        ProviderType: Google
        AttributeMapping:
          email: email

    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        AllowedOAuthFlows:
          - code
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthScopes:
          - email
          - openid
          - profile
        CallbackURLs:
          - 'https://${self:custom.apiSubdomain}.${env:ROOT_DOMAIN}/${self:custom.customDomain.basePath}/login'
          - 'https://${self:custom.stage2WebSubdomain.${opt:stage, self:provider.stage}}.${env:ROOT_DOMAIN}/api/auth/callback/cognito'
          - '${self:custom.localhost}/api/auth/callback/cognito'
        ClientName: web-app
        GenerateSecret: true
        LogoutURLs:
          - 'https://${self:custom.stage2WebSubdomain.${opt:stage, self:provider.stage}}.${env:ROOT_DOMAIN}'
          - '${self:custom.localhost}'
        SupportedIdentityProviders:
          - COGNITO
          - Google
        UserPoolId: !Ref UserPool

    UserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        CustomDomainConfig:
          CertificateArn: ${self:custom.certificateArn}
        Domain: ${self:custom.stage2AuthSubdomain.${opt:stage, self:provider.stage}}.${env:ROOT_DOMAIN}
        UserPoolId: !Ref UserPool

    UserPoolAlias:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneName: '${env:ROOT_DOMAIN}.'
        RecordSets:
          - Name: ${self:custom.stage2AuthSubdomain.${opt:stage, self:provider.stage}}.${env:ROOT_DOMAIN}.
            ResourceRecords:
              - !GetAtt UserPoolDomain.CloudFrontDistribution
            TTL: '300'
            Type: CNAME

    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
